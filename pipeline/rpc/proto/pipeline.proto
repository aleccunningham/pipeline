syntax = "proto3";

package proto;

// PipelineService makes RPC calls to pipeline build agents in order to
// execute build steps defined in a Pipeline Custom Resource Definition
service PipelineService {
  rpc Init   (InitRequest)   returns (Empty); // setup pipeline engine, environment
  rpc Next   (NextRequest)   returns (NextReply); // step through pipeline
  rpc Wait   (WaitRequest)   returns (Empty);
  rpc Done   (DoneRequest)   returns (Empty);
  rpc Extend (ExtendRequest) returns (Empty); 
  rpc Update (UpdateRequest) returns (Empty); 
  rpc Upload (UploadRequest) returns (Empty); // upload a file struct
  rpc Log    (LogRequest)    returns (Empty);
}

// PipelineState represents the current state of a Pipeline instance.
enum PipelineState {
    option allow_alias = true;
    STATE_NONE = 0; // pipeline does not exist in request/response
    STATE_UNKNOWN = 1; // pipeline exists but is not responding
    STATE_STARTING = 2;
    STATE_STARTED = 3;
    STATE_STOPPING = 4; // worker pool is draining
    STATE_STOPPED = 5;
    STATE_ERROR = 6;
}

// Pipeline 
message Pipeline {
  string id = 1;
  int64 timeout = 2;
  bytes payload = 3;
  
  PipelineState state = 4;
}

// InitRequest is the first request to a PipelineService, signalling
// for a new execution engine and environment
message InitRequest {
  string id    = 1;
  
  PipelineState  state = 2;
}

// NextRequest looks for the next pipeline step in worker queue
message NextRequest {
  Filter filter = 1;
}

// NextReply returns the next pipeline step for execution
message NextReply {
  Pipeline pipeline = 1;
}

// WaitRequest stops the agent from executing a pipeline
message WaitRequest {
  string id = 1;
}

message DoneRequest {
  string id    = 1;
  PipelineState state = 2;
}

message ExtendRequest {
  string id = 1;
}

message UploadRequest {
  string id   = 1;
  File   file = 2;
}

message UpdateRequest {
  string id    = 1;
  PipelineState state = 2;
}

message LogRequest {
  string id   = 1;
  Line   line = 2;
}

// Empty is a filler return value
message Empty {}

// HealthService checks the connection state of a service
service HealthService {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}

// HealthCheckRequest pings a service for its ServingStatus
message HealthCheckRequest {
  string service = 1;
}

// HealthCheckResponse is the ServingStatus value of the specified service
message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
  }
  ServingStatus status = 1;
}

message File {
  string name = 1;
  string proc = 2;
  string mime = 3;
  int64  time = 4;
  int32  size = 5;
  bytes  data = 6;
  map<string, string> meta = 7;
}

message Line {
  string proc = 1;
  int64  time = 2;
  int32  pos = 3;
  string out = 4;
}

message Filter {
  map<string, string> labels = 1;
  string expr = 2;
}
